الگوی پراکسی در چند حالت میتونه راهکار مناسبی ارائه بده :

Remote Proxy
در صورتی که شی مورد نظر ما در یک سرویس خارجی (مثلا
 خاص در یک سرور دیگه) وجود داره وAPI
ما نمیخوایم درگیر جزئیات این ارتباط بین برنامه خودمون (local) و سرور بشیم.
چالش مدیریت و کنترل ارتباط بین لوکال و سرور میتونه در پراکسی هندل بشه .

Protection Proxy
فرض کنیم برای گرفتن اطلاعات مختلف از یک شی باید سطح دسترسی های خاصی هم بررسی بشه
در این صورت لایه پراکسی ما میتونه این وظیفه رو به عهده داشته باشه
چون قطعا وظیفه اون شی قطعا این نیست که با یه سری شرط و شروط این دسترسی ها رو چک بکنه 
. بنابراین اینجا پراکسی نقشی از نگهبان رو ایفا میکنه. شبیه مثال فایل سیستم که در بالا مطرح شد.

Virtual Proxy
فرض کنیم کلاسی داریم که موقع ساخته شدن (در متد سازنده خودش) هزینه زیادی رو به ما تحمیل میکنه (از نظر منابع یا زمان) ، 
از طرفی ممکنه ما ما در اون لحظه نیازی به ساخته شدن شی به صورت کامل نداشته باشیم.
بنابراین خوبه که یه پراکسی این ساخته نشدن در لحظه ای که نیاز نداریم (Lazy initialization) رو برای ما مدیریت کنه.

Smart Proxy
در این نوع پراکسی ما میتونیم ویژگی های جدید به ابجکت اضافه کنیم
به عنوان مثال کش کردن یا لاگ گرفتن از ابجکت در فراخوانی های مختلف . 
یا حتی اینکه اگر کسی از اون ابجکت دیگه استفاده ای نمیکنه به صورت خودکار از حافظه پاک بشه.
در واقع رفتار های رو وارد کلاس کردیم که شی مون هوشمندانه تر عمل کنه. 
و این عملکرد هم داره در سطح پراکسی مدیریت میشه.

